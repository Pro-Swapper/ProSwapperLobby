@page "/lobbyswapper"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager
@inject IToastService toastService

<div class="alert alert-danger" role="alert">
    All these cosmetics are LOBBY ONLY. They will show to other players however they will not work ingame!
    <br />
</div>
<PageTitle>@MainService.ItemTypeToString(currentItemType) Lobby Swapping</PageTitle>


<h3>@MainService.ItemTypeToString(currentItemType) Lobby Swapping</h3>


@if (curSelect == SelectionMode.Main)
{
    <div class="card-group">
        <div class="col-sm-3">
            <div class="card text-white m-1 mx-auto" style="width:auto;height:auto;background:#486581">
                <div class="card-header text-center" style="font-size:small">@SwapsFromSkin.name<div class="text-start" style="font-size:small;color:#9Fb3C8;height:10px">@SwapsFromSkin.id</div></div>
                <div class="card-body text-center align-content-center">
                    <img class="card-img-top" src="@SwapsFromSkin.images.icon" style="width:90%; height:auto;@SwapsFromSkin.rarity.bgcss">
                </div>
                <div class="card-footer text-center">
                    <a class="btn btn-outline-light" @onclick="(() => SkinSelectMode(SelectedSlot.SwapsFrom))" style="margin-top:10px">Select @MainService.ItemTypeToString(currentItemType) you own</a>
                </div>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="card text-white m-1" style="width:auto;height:auto;background:#486581">
                <div class="card-body text-center align-content-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="60%" height="auto" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z" />
                    </svg>
                </div>
                @if (!SwapsFromSkin.id.StartsWith("ITEM_ID") && !SwapsToSkin.id.StartsWith("ITEM_ID"))
                {
                    <div class="card-footer text-center">@SwapsFromSkin.name To @SwapsToSkin.name</div>
                }
            </div>
        </div>
        <div class="col-sm-3">
            <div class="card text-white m-1" style="width:auto;height:auto;background:#486581">
                <div class="card-header text-center" style="font-size:small">@SwapsToSkin.name<div class="text-start" style="font-size:small;color:#9Fb3C8;height:10px">@SwapsToSkin.id</div></div>
                <div class="card-body text-center align-content-center">
                    <img class="card-img-top" src="@SwapsToSkin.images.icon" style="width:90%; height:auto;@SwapsToSkin.rarity.bgcss">
                </div>
                <div class="card-footer text-center">
                    <a class="btn btn-outline-light" @onclick="(() => SkinSelectMode(SelectedSlot.SwapsTo))" style="margin-top:10px">Select @MainService.ItemTypeToString(currentItemType) you want</a>
                </div>
            </div>
        </div>
    </div>

    @if (DisableButtons == false)
    {
        @if (!SwapsFromSkin.id.StartsWith("ITEM_ID") || !SwapsToSkin.id.StartsWith("ITEM_ID"))
        {
            <div class="btn-group-vertical" style="margin-left:38%">
                <button class="convert convertcolor" @onclick="() => ConvertSkin()">Convert</button><br>
                <button class="convert revertcolor" @onclick="() => RevertSkin()">Revert</button><br>
                <button class="refresh" style="margin-left:-50%" @onclick="() => Reset()"><span>Reset</span></button>
            </div>
        }
        else
        {
            <div class="btn-group-vertical" style="margin-left:38%">
                <button class="convertbtnpos" type="button" disabled>Convert</button><br />
                <button class="convertbtnpos" type="button" disabled>Revert</button>
            </div>
        }

    }

    if (DisableButtons == true)
    {
        <div class="btn-group-vertical" style="margin-left:38%">
            <button class="convertbtnpos" type="button" disabled>Convert</button><br />
            <button class="convertbtnpos" type="button" disabled>Revert</button>
        </div>
    }


    <button class="convert revertcolor" style="position:fixed;left:20%;bottom:0" @onclick="() => ResetAll()">Reset All Lobby Items</button>
    <br>
}
else if (curSelect == SelectionMode.SkinSelect)
{
    <br />
    <button class="btn btn-primary" @onclick="() => curSelect = SelectionMode.Main">Back</button>
    <br />
    <br />
    <p>Search: <input type="text" placeholder="Renegade Raider, CID_028_Athena_Commando_F" @bind-value="SearchTerm" @bind-value:event="oninput" style="width:30vw" /></p>


    @if (curSlot == SelectedSlot.SwapsFrom)
    {
        @if (!SwapsToSkin.id.StartsWith("ITEM_ID"))
        {
            <p>Showing @MainService.ItemTypeToString(currentItemType) compatible to swap to @SwapsToSkin.name</p>
        }
        else
        {
            SwapsToSkin.id = "ITEM_ID";
        }

        <div class="card-group">
            @foreach (var skin in FindCompatibleItems(SwapsToSkin.id, true))
            {
                <div class="col-md-2">
                    <div class="card text-white" style="width:auto;height:auto;background:#486581;margin:2px">
                        <div class="card-header text-center" style="font-size:small">@skin.name<div class="text-start" style="font-size:x-small;color:#9Fb3C8;height:10px">@skin.id</div></div>

                        <div class="card-body text-center align-content-center">
                            <img class="card-img-top" src="@skin.images.smallIcon" style="width:50%; height:auto;@skin.rarity.bgcss">
                        </div>
                        <div class="card-footer text-center">
                            <a class="btn btn-outline-light" @onclick="(() => SelectSkin(skin))">Select</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (curSlot == SelectedSlot.SwapsTo)
    {
        @if (!SwapsFromSkin.id.StartsWith("ITEM_ID"))
        {
            <p>Showing @MainService.ItemTypeToString(currentItemType) compatible to swap from @SwapsFromSkin.name</p>
        }

        <div class="card-group">
            @foreach (var skin in FindCompatibleItems(SwapsFromSkin.id, false))
            {
                <div class="col-md-2">
                    <div class="card text-white" style="width:auto;height:auto;background:#486581;margin:2px">
                        <div class="card-header text-center" style="font-size:small">@skin.name<div class="text-start" style="font-size:x-small;color:#9Fb3C8;height:10px">@skin.id</div></div>

                        <div class="card-body text-center align-content-center">
                            <img class="card-img-top" src="@skin.images.smallIcon" style="width:50%; height:auto;@skin.rarity.bgcss">
                        </div>
                        <div class="card-footer text-center">
                            <a class="btn btn-outline-light" @onclick="(() => SelectSkin(skin))">Select</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

<style>

    button.convertbtnpos {
        transform: translateX(-50%) translateY(-50%);
        color: #ccc;
        opacity: 0.3;
        width: 200px;
        background: #486581;
        height: 60px;
        border: 0;
        font-size: 18px;
        border-radius: 4px;
        font-family: 'Raleway', sans-serif;
        transition: 0.6s;
        overflow: hidden;
    }

    button.convert {
        transform: translateX(-50%) translateY(-50%);
        background: #486581;
        color: #ccc;
        width: 200px;
        height: 60px;
        border: 0;
        font-size: 18px;
        border-radius: 4px;
        font-family: 'Raleway', sans-serif;
        transition: 0.6s;
        overflow: hidden;
    }

        button.convert:focus {
            outline: 0;
        }

        button.convert:before {
            content: '';
            display: block;
            position: absolute;
            background: rgba(255, 255, 255, 0.5);
            width: 60px;
            height: 100%;
            left: 0;
            top: 0;
            opacity: 0.5;
            filter: blur(30px);
            transform: translateX(-100px) skewX(-15deg);
        }

        button.convert:after {
            content: '';
            display: block;
            position: absolute;
            background: rgba(255, 255, 255, 0.2);
            width: 30px;
            height: 100%;
            left: 30px;
            top: 0;
            opacity: 0;
            filter: blur(5px);
            transform: translateX(-100px) skewX(-15deg);
        }

        button.convert.convertcolor:hover {
            background: #338033;
        }

        button.convert.revertcolor:hover {
            background: #f02b2b;
        }

        button.convert:hover:before {
            transform: translateX(300px) skewX(-15deg);
            opacity: 0.6;
            transition: 0.7s;
        }

        button.convert:hover:after {
            transform: translateX(300px) skewX(-15deg);
            opacity: 1;
            transition: 0.7s;
        }

    button.refresh {
        border-radius: 4px;
        background-color: #00ad1d;
        border: none;
        color: #FFFFFF;
        text-align: center;
        font-size: 20px;
        padding: 20px;
        width: 200px;
        transition: all 0.5s;
        cursor: pointer;
    }

        button.refresh span {
            cursor: pointer;
            display: inline-block;
            position: relative;
            transition: 0.5s;
        }

            button.refresh span:after {
                content: '\0027f3';
                position: absolute;
                opacity: 0;
                top: 0;
                right: -20px;
                transition: 0.5s;
            }

        button.refresh:hover span {
            padding-right: 25px;
        }

            button.refresh:hover span:after {
                opacity: 1;
                right: 0;
            }
</style>
@code {
    public static Data.SkinObj.Datum SwapsFromSkin { get; set; }
    public static Data.SkinObj.Datum SwapsToSkin { get; set; }

    private static string SearchTerm { get; set; } = "";
    private static bool DisableButtons { get; set; } = false;




    private MainService.ItemType currentItemType;


    /// <summary>
    /// 
    /// </summary>
    /// <param name="ID"></param>
    /// <param name="Longer">If true returns skins longer than the length, false does the opposite</param>
    /// <returns></returns>
    IEnumerable<Data.SkinObj.Datum> FindCompatibleItems(string ID, bool Longer)
    {

        string SearchString = SearchTerm.ToLower();

        var ItemSource = MainService.GetItemByType(currentItemType).ToArray();

        for (var i = 0; i < ItemSource.Length; i++)
        {
            if (ItemSource[i].id.Contains("_Random"))
                continue;//We don't want CID_Random, etc


            if (ItemSource[i].id.ToLower().Contains(SearchString) || ItemSource[i].name.ToLower().Contains(SearchString))
            {
                if (ItemSource[i].id == ID)
                    continue;//We don't want to find the same skin as we have selected

                switch (ItemSource[i].rarity.value)
                {
                    case "common":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#bebebe, #646464);background: radial-gradient(#bebebe, #646464);border: 3px solid #b1b1b1;overflow: hidden";
                        break;

                    case "uncommon":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#6abb1e, #175117);	background: radial-gradient(#6abb1e, #175117);	border: 3px solid #88e339;	overflow: hidden";
                        break;
                    case "rare":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#2cc0ff, #143877);	background: radial-gradient(#2cc0ff, #143877);	border: 3px solid #37d0ff;	overflow: hidden";
                        break;

                    case "epic":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#c359ff, #4c2483);	background: radial-gradient(#c359ff, #4c2483);	border: 3px solid #ea5eff;	overflow: hidden";
                        break;

                    case "legendary":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#ea8d23, #78371d);	background: radial-gradient(#ea8d23, #78371d);	border: 3px solid #e98d4b;	overflow: hidden";
                        break;

                    case "dark":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#fb22df, #520c6f);	background: radial-gradient(#fb22df, #520c6f);	border: 3px solid #ff42e7;	overflow: hidden";
                        break;

                    case "frozen":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#94dfff, #269ed6);	background: radial-gradient(#94dfff, #269ed6);	border: 3px solid #c4dff7;	overflow: hidden";
                        break;

                    case "icon":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#36b7b7, #256b6b);	background: radial-gradient(#36b7b7, #256b6b);	border: 3px solid #52e0e0;	overflow: hidden";
                        break;

                    case "lava":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#ea8d23, #6a0a31);	background: radial-gradient(#ea8d23, #6a0a31);	border: 3px solid #d19635;	overflow: hidden";
                        break;

                    case "marvel":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#c53333, #761b1b);	background: radial-gradient(#c53333, #761b1b);	border: 3px solid #ef3537;	overflow: hidden";
                        break;

                    case "shadow":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#717171, #191919);	background: radial-gradient(#717171, #191919);	border: 3px solid #949494;	overflow: hidden";
                        break;

                    case "gaminglegends":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#5447d4, #312497);	background: radial-gradient(#5447d4, #312497);	border: 3px solid #8078ff;	overflow: hidden";
                        break;

                    case "dc":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#5475c7, #243461);	background: radial-gradient(#5475c7, #243461);	border: 3px solid #6094ce;	overflow: hidden";
                        break;

                    case "slurp":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#29f1a3, #12a9a4);	background: radial-gradient(#29f1a3, #12a9a4);	border: 3px solid #53f0ff;	overflow: hidden";
                        break;

                    case "starwars":
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#1b366e, #081737);	background: radial-gradient(#1b366e, #081737);	border: 3px solid #e7c413;	overflow: hidden";
                        break;

                    default:
                        ItemSource[i].rarity.bgcss = "background: -o-radial-gradient(#bebebe, #646464);background: radial-gradient(#bebebe, #646464);border: 3px solid #b1b1b1;overflow: hidden";
                        break;
                }

                if (Longer)
                {
                    if (ItemSource[i].name == "Recruit")//You can't swap from default skins
                        continue;

                    if (ID.Length <= ItemSource[i].id.Length)
                        yield return ItemSource[i];
                }
                else
                {
                    if (ID.Length >= ItemSource[i].id.Length)
                        yield return ItemSource[i];
                }

                }
            }
    }

    enum SelectionMode
    {
        Main,
        SkinSelect
    }

    enum SelectedSlot
    {
        SwapsFrom,
        SwapsTo
    }
    SelectionMode curSelect = SelectionMode.Main;
    SelectedSlot curSlot;


    void SkinSelectMode(SelectedSlot selected)
    {
        curSelect = SelectionMode.SkinSelect;
        curSlot = selected;
    }

    void SelectSkin(Data.SkinObj.Datum SelectedSkin)
    {
        if (curSlot == SelectedSlot.SwapsFrom)
        {
            SwapsFromSkin = SelectedSkin;
        }
        else if (curSlot == SelectedSlot.SwapsTo)
        {
            SwapsToSkin = SelectedSkin;
        }
        curSelect = SelectionMode.Main;
        SearchTerm = "";
    }


    private async void ConvertSkin()
    {
        if (MainService.CurrentConfig.Paks == null || MainService.CurrentConfig.CurrentInstalledFortniteVersion == null)
        {
            toastService.ShowError("Fortnite is not installed on your PC! If Fortnite is already installed try reinstalling Epic Games Launcher and Fortnite. Note: Pro Swapper Lobby does NOT work on Geforce Now.");
            return;
        }

        if (DisableButtons == false)
        {
            DisableButtons = true;
            await InvokeAsync(StateHasChanged);
            Exception ex = new Exception("");
            bool Swapped = await Task.Run(() => ProSwapperLobby.SwapperLogic.SwapLogic.LobbySwap(SwapsFromSkin, SwapsToSkin, true, ref ex));
            if (Swapped)
            {
                toastService.ShowSuccess($"Succesfully converted {SwapsFromSkin.name} To {SwapsToSkin.name} [Lobby]");
                MainService.CurrentConfig.swaplogs.Add(new MainService.SwapLogs(SwapsFromSkin, SwapsToSkin));
                MainService.SaveConfig();
            }
            else
            {
                toastService.ShowError($"[Log] ERROR converting {SwapsFromSkin.name} To {SwapsToSkin.name} [Lobby]. It may be already converted, click \"Reset All Lobby Swaps\" and reswap.{ex.Message}");
            }
            DisableButtons = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void RevertSkin()
    {
        if (MainService.CurrentConfig.Paks == null || MainService.CurrentConfig.CurrentInstalledFortniteVersion == null)
        {
            toastService.ShowError("Fortnite is not installed on your PC! If Fortnite is already installed try reinstalling Epic Games Launcher and Fortnite. Note: Pro Swapper Lobby does NOT work on Geforce Now.");
            return;
        }

        if (DisableButtons == false)
        {
            DisableButtons = true;
            await InvokeAsync(StateHasChanged);
            Exception ex = new Exception("");
            bool Swapped = await Task.Run(() => ProSwapperLobby.SwapperLogic.SwapLogic.LobbySwap(SwapsToSkin, SwapsFromSkin, false, ref ex));
            if (Swapped)
            {
                toastService.ShowSuccess($"Succesfully reverted {SwapsFromSkin.name} To {SwapsToSkin.name} [Lobby]");
                MainService.CurrentConfig.swaplogs.Remove(new MainService.SwapLogs(SwapsFromSkin, SwapsToSkin));
                MainService.SaveConfig();
            }
            else
            {
                toastService.ShowError($"[Log] ERROR reverting {SwapsFromSkin.name} To {SwapsToSkin.name} [Lobby]. It may be already converted, click \"Reset All Lobby Swaps\" and reswap.{ex.Message}");
            }
            DisableButtons = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void Reset()
    {
        if (DisableButtons == false)
        {
            DisableButtons = true;
            await InvokeAsync(StateHasChanged);
            toastService.ShowInfo($"Reset selected {MainService.ItemTypeToString(currentItemType)}");

            var placeHolderskin = new Data.SkinObj.Datum();
            placeHolderskin.name = $"Please select an item";
            placeHolderskin.id = "ITEM_ID                                                                                                                                                    ";
            placeHolderskin.images = new Data.SkinObj.Images() { icon = "empty-icon.png", smallIcon = "empty-icon.png" };
            placeHolderskin.rarity = new Data.SkinObj.Rarity() { value = "none", bgcss = "background: -o-radial-gradient(#5447d4, #312497);	background: radial-gradient(#5447d4, #312497);	border: 3px solid #8078ff;	overflow: hidden" };

            SwapsFromSkin = SwapsToSkin = placeHolderskin;
            OnInitialized();
            DisableButtons = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void ResetAll()
    {
        MainService.ResetAll();
        toastService.ShowSuccess($"Reset all currently converted lobby items");
    }



    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        var query = QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query);

        if (query.TryGetValue("type", out var itemTypeQuery))
        {
            MainService.ItemType _outitemtype = MainService.StringToItemType(itemTypeQuery);
            if (currentItemType != _outitemtype)
            {
                currentItemType = _outitemtype;
                curSelect = SelectionMode.Main;


                //Reset current selected stuff in slots
                var placeHolderskin = new Data.SkinObj.Datum();
                placeHolderskin.name = $"Please select an item";
                placeHolderskin.id = "ITEM_ID                                                                                                                                                    ";
                placeHolderskin.images = new Data.SkinObj.Images() { icon = "empty-icon.png", smallIcon = "empty-icon.png" };
                placeHolderskin.rarity = new Data.SkinObj.Rarity() { value = "none", bgcss = "background: -o-radial-gradient(#5447d4, #312497);	background: radial-gradient(#5447d4, #312497);	border: 3px solid #8078ff;	overflow: hidden" };

                SwapsFromSkin = SwapsToSkin = placeHolderskin;


                StateHasChanged();
            }
        }
    }
    protected override void OnInitialized()
    {
        var query = QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query);
        OnLocationChanged(null, null);
        NavManager.LocationChanged += OnLocationChanged;
        query.TryGetValue("FromStyle", out var fromskinID);
        if (Convert.ToString(fromskinID) != "true")
        {
            var placeHolderskin = new Data.SkinObj.Datum();
            placeHolderskin.name = $"Please select an item";
            placeHolderskin.id = "ITEM_ID                                                                                                                                                    ";
            placeHolderskin.images = new Data.SkinObj.Images() { icon = "empty-icon.png", smallIcon = "empty-icon.png" };
            placeHolderskin.rarity = new Data.SkinObj.Rarity() { value = "none", bgcss = "background: -o-radial-gradient(#5447d4, #312497);	background: radial-gradient(#5447d4, #312497);	border: 3px solid #8078ff;	overflow: hidden" };

            SwapsFromSkin = SwapsToSkin = placeHolderskin;
        }
        StateHasChanged();
    }


}
